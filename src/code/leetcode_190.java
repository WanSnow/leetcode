package code;

/**190. 颠倒二进制位
 *颠倒给定的 32 位无符号整数的二进制位。
 *
 *  
 *
 * 示例 1：
 *
 * 输入: 00000010100101000001111010011100
 * 输出: 00111001011110000010100101000000
 * 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
 *       因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
 * 示例 2：
 *
 * 输入：11111111111111111111111111111101
 * 输出：10111111111111111111111111111111
 * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
 *       因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。
 *  
 *
 * 提示：
 *
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
 *  
 *
 * 进阶:
 * 如果多次调用这个函数，你将如何优化你的算法？
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/reverse-bits
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class leetcode_190 {
    public static void main(String[] args) {
        Solution_190 s = new Solution_190();
        int n = 43261596;
        System.out.println(s.reverseBits(n));
    }
}

/**                                                                                  A=60 B=13
 * ＆	如果相对应位都是1，则结果为1，否则为0	                                            （A＆B），得到12，即0000 1100
 * |	如果相对应位都是 0，则结果为 0，否则为 1	                                        （A | B）得到61，即 0011 1101
 * ^	如果相对应位值相同，则结果为0，否则为1	                                        （A ^ B）得到49，即 0011 0001
 * 〜	按位取反运算符翻转操作数的每一位，即0变成1，1变成0。	                            （〜A）得到-61，即1100 0011
 * << 	按位左移运算符。左操作数按位左移右操作数指定的位数。	                                 A << 2得到240，即 1111 0000
 * >> 	按位右移运算符。左操作数按位右移右操作数指定的位数。	                                 A >> 2得到15即 1111
 * >>> 	按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。	     A>>>2得到15即0000 1111
 *
 *
 * <<=	左移位赋值运算符	    C <<= 2等价于C = C << 2
 * >>=	右移位赋值运算符	    C >>= 2等价于C = C >> 2
 * ＆=	按位与赋值运算符	    C ＆= 2等价于C = C ＆ 2
 * ^=	按位异或赋值操作符	    C ^= 2等价于C = C ^ 2
 * |=	按位或赋值操作符	    C |= 2等价于C = C | 2
 */
class Solution_190 {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        int res = 0;
        int count = 0;
        while (count < 32) {
            res <<= 1;  //res 左移一位空出位置
            res |= (n & 1); //得到的最低位加过来
            n >>= 1;//原数字右移一位去掉已经处理过的最低位
            count++;
        }
        return res;
    }
}